# specify the version of docker-compose
version: "3.8"

services:
  ssrapp:
    # api service depends on the db service so the db service will be started before the api service
    depends_on:
      - db

    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - 3000:3000
    environment:
      - PORT=${PORT}
      - MONGODB_URI=${MONGODB_URI}
      - STRIPE_KEY=${STRIPE_KEY}
      - STRIPE_PUBLIC_KEY=${STRIPE_PUBLIC_KEY}

      # establish docker compose watch mode for the api service
    develop:
      # specify the files to watch for changes
      watch:
        # it'll watch for changes in package.json and package-lock.json and rebuild the container and image if there are any changes
        - path: ./package.json
          action: rebuild
        - path: ./package-lock.json
          action: rebuild

        # it'll watch for changes in the api directory and sync the changes with the container real time
        - path: ./
          target: /app
          action: sync

  # define the db service
  db:
    # specify the image to use for the db service from docker hub. If we have a custom image, we can specify that in this format
    # In the above two services, we're using the build context to build the image for the service from the Dockerfile so we specify the image as "build: ./frontend" or "build: ./backend".
    # but for the db service, we're using the image from docker hub so we specify the image as "image: mongo:latest"
    # you can find the image name and tag for mongodb from docker hub here: https://hub.docker.com/_/mongo
    image: mongo:latest
    ports:
      - 27017:27017
    # restart the container if it crashes
    restart: always

    # specify the volumes to mount for the db service
    # we're mounting the volume named "bookShopDB" inside the container at /data/db directory
    # this is done so that the data inside the mongodb container is persisted even if the container is stopped
    volumes:
      - bookShopDB:/data/db

# define the volumes to be used by the services
volumes:
  bookShopDB:
